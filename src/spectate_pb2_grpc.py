# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import spectate_pb2 as spectate__pb2


class SPECtateDistributedRunnerStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.DoBenchmarkRun = channel.unary_unary(
            '/spectate.SPECtateDistributedRunner/DoBenchmarkRun',
            request_serializer=spectate__pb2.RunConfiguration.SerializeToString,
            response_deserializer=spectate__pb2.BenchmarkResults.FromString,
        )


class SPECtateDistributedRunnerServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def DoBenchmarkRun(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SPECtateDistributedRunnerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'DoBenchmarkRun':
        grpc.unary_unary_rpc_method_handler(
            servicer.DoBenchmarkRun,
            request_deserializer=spectate__pb2.RunConfiguration.FromString,
            response_serializer=spectate__pb2.BenchmarkResults.
            SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'spectate.SPECtateDistributedRunner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
